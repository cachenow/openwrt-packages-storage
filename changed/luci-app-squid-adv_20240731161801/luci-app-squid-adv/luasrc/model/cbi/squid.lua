require "ubus"
local fs = require "nixio.fs"
local net = require "luci.model.network".init()
local sys = require "luci.sys"
local nt = require "luci.sys".net

local ifaces = sys.net:devices()
local DIR="/etc/squid/cert"

m = Map("squid", translate("Squid"))
m.on_after_commit = function() luci.sys.call("/etc/init.d/squid restart") end

s = m:section(TypedSection, "squid")
s:tab("general", translate("General Settings"))
s:tab("transparent", translate("Transparent Proxy"))
s:tab("openssl", translate("OpenSSL Config"))
s:tab("ca_usage", translate("CA Install"), translate("Other squid users cannot intercept your connection. This page is served by your OpenWrt squid luci application. The certificate you are about to install has been uniquely generated by the luci squid application and is not shared between squid installations. "))
s:tab("advanced", translate("Advanced Settings"))
s.addremove = false
s.anonymous = true

-- General Settings
http_port = s:taboption("general", Value, "http_port", translate("Port"))
http_port.datatype = "portrange"
http_port.placeholder = "0-65535"

visible_hostname = s:taboption("general", Value, "visible_hostname", translate("Visible Hostname"))
visible_hostname.datatype="string"
visible_hostname.placeholder = "OpenWrt"

coredump_dir = s:taboption("general", Value, "coredump_dir", translate("Coredump files directory"))
coredump_dir.datatype="string"
coredump_dir.placeholder = "/tmp/squid"

-- Transparent Proxy
n = s:taboption("transparent", ListValue, "gatewayinterface", translate("Interface name"))
for _, iface in ipairs(ifaces) do
	if not (iface == "lo" or iface:match("^ifb.*")) then
		local nets = net:get_interface(iface)
		nets = nets and nets:get_networks() or {}
		for k, v in pairs(nets) do
			nets[k] = nets[k].sid
		end
		nets = table.concat(nets, ",")
		n:value(iface, ((#nets > 0) and "%s (%s)" % {iface, nets} or iface))
	end
end
n.default = "br-lan"

transparent_http = s:taboption("transparent", Flag, "transparent_http", translate("Transparent HTTP Proxy Enabled:"))

transparent_http_port = s:taboption("transparent", Value, "transparent_http_port", translate("Bound Port for Transparent HTTP Proxy:"))
transparent_http_port.datatype = "port"
transparent_http_port.placeholder = "0-65535"
transparent_http_port.default = "3138"

transparent_https = s:taboption("transparent", Flag, "transparent_https", translate("HTTP Proxy (Port 443) Enabled:"))

transparent_https_port = s:taboption("transparent", Value, "transparent_https_port", translate("Bound Port for Transparent HTTPS Proxy:"))
transparent_https_port.datatype = "port"
transparent_https_port.placeholder = "0-65535"
transparent_https_port.default = "3139"

mac_list = s:taboption("transparent", DynamicList, "transparent_mac", translate("Allowed MACs for Transparent HTTPS Proxy:"))
nt.mac_hints(function(mac, name) mac_list :value(mac, "%s (%s)" %{ mac, name }) end)

-- OpenSSL Configuration

out = luci.sys.exec('openssl x509 -in ' .. DIR .. '/ca.pem -noout -dates')
notBefore = s:taboption("openssl", Value, "_notBefore", translate("Current Certificate Not Valid Before:"))
notBefore.readonly = true
notBefore.default = string.match(out, "notBefore\=([^\n]*)") or "Invalid"
if (notBefore.default == "Invalid") then
	m.message = translate( translate("Transparent HTTPS proxy not available because no OpenSSL Certificate has been generated yet!") )
end

notAfter = s:taboption("openssl", Value, "_notAfter", translate("Current Certificate Not Valid After:"))
notAfter.readonly = true
notAfter.default = string.match(out, "notAfter\=([^\n]*)") or "Invalid"

-- generate = s:taboption("openssl", Button, "", "Generate Certificates")

s:taboption("openssl", DummyValue, '', '').template = "squid/openssl-config"

bits= s:taboption("openssl", ListValue, "openssl_rsa_key_bits", translate("RSA Key Bit Size:"))
bits:value("4096", "4096 bits (" .. translate("Best") .. ")")
bits:value("2048", "2048 bits (" .. translate("Better") .. ")")
bits:value("1024", "1024 bits (" .. translate("Not Recommended") .. ")")
bits:value("512", "512 bits (" .. translate("Not Recommended") .. ")")
bits.rmempty = false
bits.default = "4096"

s:taboption("openssl", Value, "openssl_days", translate("Days The Certificate Is Good For:")).default = "3650"

s:taboption("openssl", Value, "openssl_countryName", translate("Country Name:")).default = "US"

s:taboption("openssl", Value, "openssl_stateOrProvinceName", translate("State Or Province Name:")).default = "Unspecified"

s:taboption("openssl", Value, "openssl_localityName", translate("Locality Name:")).default = "Unspecified"

s:taboption("openssl", Value, "openssl_organizationName", translate("Organization Name:")).default = "OpenWrt Router"

-- CA Install

s:taboption("ca_usage", DummyValue, "", "").template = "squid/ca-install"

-- Advanced Settings

squid_config_file = s:taboption("advanced", TextValue, "_data", "")
squid_config_file.wrap = "off"
squid_config_file.rows = 25
squid_config_file.rmempty = false

function squid_config_file.cfgvalue()
	local uci = require "luci.model.uci".cursor_state()
	local file = uci:get("squid", "squid", "config_file")
	if file then
		return fs.readfile(file) or ""
	else
		return ""
	end
end

function squid_config_file.write(self, section, value)
    if value then
		local uci = require "luci.model.uci".cursor_state()
		local file = uci:get("squid", "squid", "config_file")
		fs.writefile(file, value:gsub("\r\n", "\n"))
    end
end

return m
