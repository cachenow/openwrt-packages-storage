#!/usr/bin/utpl -S

{# Thanks to homeproxy -#}
{%-
	import { readfile } from 'fs';
	import { cursor } from 'uci';
	import { isEmpty, yqRead } from '/etc/fchomo/scripts/fchomo.uc';

	const fw4 = require('fw4');

	function array_to_nftarr(array) {
		if (type(array) !== 'array')
			return null;

		return `{ ${join(', ', uniq(array))} }`;
	}

	function resolve_ipv6(str) {
		if (isEmpty(str))
			return null;

		let ipv6 = fw4.parse_subnet(str)?.[0];
		if (!ipv6 || ipv6.family !== 6)
			return null;

		if (ipv6.bits > -1)
			return `${ipv6.addr}/${ipv6.bits}`;
		else
			return `& ${ipv6.mask} == ${ipv6.addr}`;
	}

	/* Misc config */
	const resources_dir = '/etc/fchomo/resources';

	/* UCI config start */
	const cfgname = 'fchomo';
	const uci = cursor();
	uci.load(cfgname);

	const common_tcpport = uci.get(cfgname, 'config', 'common_tcpport') || '20-21,22,53,80,110,143,443,465,853,873,993,995,8080,8443,9418',
	      common_udpport = uci.get(cfgname, 'config', 'common_udpport') || '20-21,22,53,80,110,143,443,853,993,995,8080,8443,9418',
	      stun_port = uci.get(cfgname, 'config', 'stun_port') || '3478,19302',
	      tun_name = uci.get(cfgname, 'config', 'tun_name') || 'hmtun0',
	      self_mark = uci.get(cfgname, 'config', 'self_mark') || '200',
	      tproxy_mark = uci.get(cfgname, 'config', 'tproxy_mark') || '201',
	      tun_mark = uci.get(cfgname, 'config', 'tun_mark') || '202';

	const redir_port = uci.get(cfgname, 'inbound', 'redir_port') || '7891',
	      tproxy_port = uci.get(cfgname, 'inbound', 'tproxy_port') || '7892',
	      tunnel_port = uci.get(cfgname, 'inbound', 'tunnel_port') || '7893',
	      proxy_mode = uci.get(cfgname, 'inbound', 'proxy_mode') || 'redir_tproxy';

	const global_ipv6 = uci.get(cfgname, 'global', 'ipv6') || '1',
	      dns_ipv6 = uci.get(cfgname, 'dns', 'ipv6') || '1',
	      dns_port = uci.get(cfgname, 'dns', 'dns_port') || '7853',
	      dns_hijacked = '1';

	let default_proxy, routing_tcpport, routing_udpport, routing_mode, routing_domain;
	default_proxy = uci.get(cfgname, 'routing', 'default_proxy') || null,
	routing_tcpport = uci.get(cfgname, 'routing', 'routing_tcpport') || null;
	routing_udpport = uci.get(cfgname, 'routing', 'routing_udpport') || null;
	routing_mode = uci.get(cfgname, 'routing', 'routing_mode') || null;
	routing_domain = uci.get(cfgname, 'routing', 'routing_domain') || '0';

	if (routing_tcpport === 'common')
		routing_tcpport = common_tcpport;
	else if (routing_tcpport === 'common_stun')
		routing_tcpport = `${common_tcpport},${stun_port}`;

	if (routing_udpport === 'common')
		routing_udpport =  common_udpport;
	else if (routing_udpport === 'common_stun')
		routing_udpport = `${common_udpport},${stun_port}`;

	if (!routing_mode)
		routing_domain = '0';

	const proxy_router = uci.get(cfgname, 'routing', 'proxy_router') || '1';
	const control_options = [
		"listen_interfaces", "lan_filter",
		"lan_direct_mac_addrs", "lan_direct_ipv4_ips", "lan_direct_ipv6_ips",
		"lan_proxy_mac_addrs", "lan_proxy_ipv4_ips", "lan_proxy_ipv6_ips"
	];
	const control_info = {};

	for (let i in control_options)
		control_info[i] = uci.get(cfgname, 'routing', i);

	control_info.wan_direct_ipv4_ips = json(trim(yqRead('-oj', '.IPCIDR',  resources_dir + '/direct_list.yaml')) || '[]');
	control_info.wan_direct_ipv6_ips = json(trim(yqRead('-oj', '.IPCIDR6', resources_dir + '/direct_list.yaml')) || '[]');
	control_info.wan_proxy_ipv4_ips  = json(trim(yqRead('-oj', '.IPCIDR',  resources_dir + '/proxy_list.yaml')) || '[]');
	control_info.wan_proxy_ipv6_ips  = json(trim(yqRead('-oj', '.IPCIDR6', resources_dir + '/proxy_list.yaml')) || '[]');
	/* UCI config end */
-%}

table inet fchomo {
	{# Reserved addresses -#}
	set inet4_local_addr {
		type ipv4_addr
		flags interval
		auto-merge
		elements = {
			0.0.0.0/8,
			10.0.0.0/8,
			100.64.0.0/10,
			127.0.0.0/8,
			169.254.0.0/16,
			172.16.0.0/12,
			{# 172.25.26.0/30, https://github.com/muink/openwrt-alwaysonline.git -#}
			192.0.0.0/24,
			192.0.2.0/24,
			192.88.99.0/24,
			192.168.0.0/16,
			198.18.0.0/15,
			198.51.100.0/24,
			203.0.113.0/24,
			224.0.0.0/4,
			240.0.0.0/4,
			255.255.255.255/32
		}
	}

	{% if (global_ipv6 === '1'): %}
	set inet6_local_addr {
		type ipv6_addr
		flags interval
		auto-merge
		elements = {
			::/128,
			::1/128,
			::ffff:0:0/96,
			::ffff:0:0:0/96,
			64:ff9b::/96,
			64:ff9b:1::/48,
			100::/64,
			2001::/32,
			2001:10::/28,
			2001:20::/28,
			2001:db8::/32,
			2002::/16,
			3fff::/20,
			5f00::/16,
			fc00::/7,
			{# fdfe:aead:2526::0/126, https://github.com/muink/openwrt-alwaysonline.git -#}
			fe80::/10,
			ff00::/8
		}
	}
	{% endif %}
	{# Custom Direct list #}
	set inet4_wan_direct_addr {
		type ipv4_addr
		flags interval
		auto-merge
		elements = { {{ join(', ', control_info.wan_direct_ipv4_ips) }} }
	}

	{% if (global_ipv6 === '1'): %}
	set inet6_wan_direct_addr {
		type ipv6_addr
		flags interval
		auto-merge
		elements = { {{ join(', ', control_info.wan_direct_ipv6_ips) }} }
	}
	{% endif %}
	{# Custom Proxy list #}
	set inet4_wan_proxy_addr {
		type ipv4_addr
		flags interval
		auto-merge
		elements = { {{ join(', ', control_info.wan_proxy_ipv4_ips) }} }
	}

	{% if (global_ipv6 === '1'): %}
	set inet6_wan_proxy_addr {
		type ipv6_addr
		flags interval
		auto-merge
		elements = { {{ join(', ', control_info.wan_proxy_ipv6_ips) }} }
	}
	{% endif %}
	{# Routing mode #}
	{% if (match(routing_mode, /bypass_cn/)): %}
	set inet4_china_list_addr {
		type ipv4_addr
		flags interval
		auto-merge
		elements = { {{ join(', ', split(trim(readfile(resources_dir + '/china_ip4.txt')), /[\r\n]/)) }} }
	}

	{% if (global_ipv6 === '1'): %}
	set inet6_china_list_addr {
		type ipv6_addr
		flags interval
		auto-merge
		elements = { {{ join(', ', split(trim(readfile(resources_dir + '/china_ip6.txt')), /[\r\n]/)) }} }
	}
	{% endif %}
	{% elif (match(routing_mode, /routing_gfw/)): %}
	set inet4_gfw_list_addr {
		type ipv4_addr
		flags interval
		auto-merge
		elements = {}
	}

	{% if (global_ipv6 === '1'): %}
	set inet6_gfw_list_addr {
		type ipv6_addr
		flags interval
		auto-merge
		elements = {}
	}
	{% endif %}
	{% endif /* routing_mode */ %}
	{# Routing port #}
	{% if (routing_tcpport): %}
	set tcp_routing_port {
		type inet_service
		flags interval
		auto-merge
		elements = { {{ join(', ', split(routing_tcpport, ',')) }} }
	}
	{% endif %}

	{% if (routing_udpport): %}
	set udp_routing_port {
		type inet_service
		flags interval
		auto-merge
		elements = { {{ join(', ', split(routing_udpport, ',')) }} }
	}
	{% endif %}

	chain prerouting {
		type nat hook prerouting priority mangle - 5; policy accept;
	}

	chain input {
		type filter hook input priority mangle - 5; policy accept;
	}

	chain forward {
		type filter hook forward priority mangle - 5; policy accept;
	}

	chain output {
		type nat hook output priority mangle - 5; policy accept;
	}

	chain postrouting {
		type nat hook postrouting priority mangle - 5; policy accept;
	}
}
